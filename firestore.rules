
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for Users Collection
    match /users/{userId} {
      // Admins can read/write any user document
      // Users can only read/write their own document
      allow read, write: if request.auth.uid == userId || isAdmin();
    }
    
    // Rules for Freights Collection (Placeholder - adjust as needed)
    match /freights/{freightId} {
        // Logged-in users can read
        allow read: if request.auth.uid != null;
        // Only companies can create, only the creator company or admin can update/delete
        allow create: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'company';
        allow update, delete: if isAdmin() || (resource.data.companyId == request.auth.uid);
    }

    // Rules for Vehicle Categories
    match /vehicle_categories/{categoryId} {
      allow read: if request.auth.uid != null;
      allow list, create, update, delete: if isAdmin();
    }
    
    // Rules for Vehicle Types
    match /vehicle_types/{typeId} {
        allow read: if request.auth.uid != null;
        allow list, create, update, delete: if isAdmin();
    }

    // Rules for Body Types
    match /body_types/{bodyTypeId} {
      allow read: if request.auth.uid != null;
      allow list, create, update, delete: if isAdmin();
    }

    // Rules for Vehicles
     match /vehicles/{vehicleId} {
        allow read: if request.auth.uid != null;
        allow list, create, update, delete: if isAdmin();
     }
  }
}
