rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Função para verificar se o usuário autenticado é um administrador.
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Regras para a coleção 'users'.
    // Permite que admins tenham controle total sobre os dados de usuários.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth.uid == userId || isAdmin(); 
      allow delete: if isAdmin();
    }

    // Regras para a coleção 'freights'.
    // Atualizado para exigir autenticação para a criação de fretes.
    match /freights/{freightId} {
      allow read: if true;
      allow create: if true; // Permitir criação anônima conforme o fluxo da aplicação
      allow update, delete: if isAdmin() || (request.auth != null && resource.data.companyId == request.auth.uid);
    }
    
    // Regra para coleções que só podem ser gerenciadas por admins.
    match /body_types/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /vehicle_categories/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /vehicle_types/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /vehicles/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /plans/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}